name: Docker Image CI v2

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-22.04

    env:
      DOCKER_IMAGE: rnapdbee-image
      DOCKER_CONTAINER: rnapdbee-container

    steps:
      - uses: actions/checkout@v4

      - name: Build the docker image
        run: DOCKER_BUILDKIT=1 docker build --progress=plain --target server -t $DOCKER_IMAGE .

      - name: Create the docker container
        run: |
          docker create --name $DOCKER_CONTAINER --env-file .env_ci $DOCKER_IMAGE

      - name: Start the docker container
        run: |
          docker start $DOCKER_CONTAINER

      - name: Copy files
        run: |
          docker cp tests/ $DOCKER_CONTAINER:rnapdbee-adapters/src/
          docker cp test_requirements.txt $DOCKER_CONTAINER:/

      - name: Install test requirements
        run: |
          # Attempt pip install and capture host dmesg before and after
          sudo dmesg > dmesg_before.log
          { docker exec $DOCKER_CONTAINER /bin/bash -c "pip3 install -v -r test_requirements.txt"; } || true
          sudo dmesg > dmesg_after.log

          # Capture host system information
          free -m > memory_info.log
          df -h > disk_info.log
          ps aux > process_info.log

          # Try to get any logs from inside the container
          docker logs $DOCKER_CONTAINER > container_logs.log 2>&1 || true

          # Display captured information
          echo "dmesg before:"
          cat dmesg_before.log
          echo "dmesg after:"
          cat dmesg_after.log
          echo "Memory info:"
          cat memory_info.log
          echo "Disk info:"
          cat disk_info.log
          echo "Process info:"
          cat process_info.log
          echo "Container logs:"
          cat container_logs.log
          false

      - name: Run test
        run: docker start $DOCKER_CONTAINER && docker exec $DOCKER_CONTAINER bin/bash -c "cd ./rnapdbee-adapters/src/tests && pytest -v --cov='adapters'"

  lint:
    runs-on: ubuntu-22.04
    if: ${{ github.actor != 'dependabot[bot]' }}

    strategy:
      matrix:
        python-version: ["3.10"]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r test_requirements.txt

      - name: Analyze with pylint
        run: pylint --rcfile pylintrc src/

  auto-merge-dependabot-non-major-updates:
    needs: build
    runs-on: ubuntu-latest
    if: ${{ github.actor == 'dependabot[bot]' }}
    permissions:
      pull-requests: write
      contents: write
      checks: write
    steps:
      - name: Dependabot metadata
        id: metadata
        uses: dependabot/fetch-metadata@v2
        with:
          github-token: "${{ secrets.GITHUB_TOKEN }}"

      - name: Enable auto-merge for Dependabot PRs
        if: ${{ steps.metadata.outputs.update-type != 'version-update:semver-major' }}
        run: gh pr merge --auto --squash "$PR_URL"
        env:
          PR_URL: ${{ github.event.pull_request.html_url }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
